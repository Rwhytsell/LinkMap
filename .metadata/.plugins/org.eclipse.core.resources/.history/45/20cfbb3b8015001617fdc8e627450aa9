package spiderBot;

import java.io.IOException;
import java.util.*;

import org.jsoup.*;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/* Created by Ryan Whytsell, project started on 5/4/16 for educational purposes only*/

public class Spider {

	public static void initSpider(Double mxThreads, Double lnkDepth, String originURL) //Will be called by the start button in the UI
	{
		System.out.println("Max threads set at " +mxThreads);
		System.out.println("Link depth set at " +lnkDepth);
		System.out.println("Origin URL set to " +originURL);
		
	}
    public boolean crawl(String url)
    {
    	try
        {
            Connection connection = Jsoup.connect(url).userAgent(USER_AGENT);
            Document htmlDocument = connection.get();
            this.htmlDocument = htmlDocument;
            if(connection.response().statusCode() == 200) // 200 is the HTTP OK status code indicating that everything is ok
            	
            {
                System.out.println("\n**Visiting** Received web page at " + url);
            }
            if(!connection.response().contentType().contains("text/html"))
            {
                System.out.println("**Failure** Retrieved something other than HTML");
                return false;
            }
            Elements linksOnPage = htmlDocument.select("a[href]");
            System.out.println("Found (" + linksOnPage.size() + ") links");
            for(Element link : linksOnPage)
            {
                this.links.add(link.absUrl("href"));
            }
            return true;
        }
        catch(IOException ioe)
        {
            // We were not successful in our HTTP request
            return false;
        }
    }
    
    public boolean searchForWord(String searchWord)
    {
        //This method should only be used after a successful crawl.
        System.out.println("Searching for the word " + searchWord + "...");
        String bodyText = this.htmlDocument.body().text();
        return bodyText.toLowerCase().contains(searchWord.toLowerCase());
    }
    
    


    public List<String> getLinks()
    {
        return this.links;
    }
    
    //Variable declaration
	private Set<String> pagesVisited = new HashSet<String>();   		//Pages that have already been visited/crawled
    private List<String> pagesToVisit = new LinkedList<String>();		//Origin URL or URLs resulting from previous crawled pages
    private List<String> links = new LinkedList<String>();				
    private Document htmlDocument;
    
    //User agent to spoof websites into thinking user is a mozilla firefox browser
    private static final String USER_AGENT ="Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";
    
    //End variable declaration
}
